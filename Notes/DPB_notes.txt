Design Patterns : Behavioral

** Topics: **

1. Chain of Resposibility
2. Command
3. Mediator
4. Observer
------------
5. Intepreter
6. State
7. Strategy
8. Template Method
9. Visitor
------------
10. Iterator
11. Memento
12. Null Object

** Tools: **

xCode IDE
Apple Clang
GNU++20

******** LECTURE 1 : Intoroduction to Design Patterns ********

Design patterns are solutions to commonly occuring problems in object oriented programming.
Design patterns are specific organizational strategies we can use in our programs to ensure 
that our code is easy to modify and maintain for the forseable future.


******** LECTURE 2 : Behavioral Patterns Group 1 ********

*** Chain of Responsibility Pattern ***

Use this pattern when you need to implement a series of nested handlers.
Example: series of checks done over the user credentials.

*** Command Pattern ***

Reduce coupling between classes that call one another and make functionality more resuseable
between similar classes.


*** Mediator Pattern ***

When you need to reduce coupling and organize complex dependencies between a number of
tighly coupled classes.
Instead of having each class know about the other classes, create a mediator object that
manges all the relationship between theese classes.


******** LECTURE 3 : Behavioral Patterns Group 2 ********

******** LECTURE 4 : Behavioral Patterns Group 3 ********

